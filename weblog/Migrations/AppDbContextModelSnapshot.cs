// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using weblog.Models;

namespace weblog.Migrations
{
    [DbContext(typeof(AppDbContext))]
    partial class AppDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("varchar(95) CHARACTER SET utf8mb4");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("Name")
                        .HasColumnType("varchar(256) CHARACTER SET utf8mb4")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedName")
                        .HasColumnType("varchar(256) CHARACTER SET utf8mb4")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasName("RoleNameIndex");

                    b.ToTable("AspNetRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("ClaimType")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("varchar(95) CHARACTER SET utf8mb4");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("varchar(95) CHARACTER SET utf8mb4");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("Email")
                        .HasColumnType("varchar(256) CHARACTER SET utf8mb4")
                        .HasMaxLength(256);

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("NormalizedEmail")
                        .HasColumnType("varchar(256) CHARACTER SET utf8mb4")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedUserName")
                        .HasColumnType("varchar(256) CHARACTER SET utf8mb4")
                        .HasMaxLength(256);

                    b.Property<string>("PasswordHash")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("UserName")
                        .HasColumnType("varchar(256) CHARACTER SET utf8mb4")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasName("UserNameIndex");

                    b.ToTable("AspNetUsers");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("ClaimType")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("varchar(95) CHARACTER SET utf8mb4");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("varchar(128) CHARACTER SET utf8mb4")
                        .HasMaxLength(128);

                    b.Property<string>("ProviderKey")
                        .HasColumnType("varchar(128) CHARACTER SET utf8mb4")
                        .HasMaxLength(128);

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("varchar(95) CHARACTER SET utf8mb4");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("varchar(95) CHARACTER SET utf8mb4");

                    b.Property<string>("RoleId")
                        .HasColumnType("varchar(95) CHARACTER SET utf8mb4");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("varchar(95) CHARACTER SET utf8mb4");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("varchar(128) CHARACTER SET utf8mb4")
                        .HasMaxLength(128);

                    b.Property<string>("Name")
                        .HasColumnType("varchar(128) CHARACTER SET utf8mb4")
                        .HasMaxLength(128);

                    b.Property<string>("Value")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("weblog.Models.Category", b =>
                {
                    b.Property<int>("CategoryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("ShortDescription")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("Title")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.HasKey("CategoryId");

                    b.ToTable("Categories");

                    b.HasData(
                        new
                        {
                            CategoryId = 1,
                            ShortDescription = "Medium's largest active publications about Tech. Follow us to join our community.",
                            Title = "Tech"
                        },
                        new
                        {
                            CategoryId = 2,
                            ShortDescription = "Medium's largest active publications about Politics. Follow us to join our community.",
                            Title = "Politics"
                        },
                        new
                        {
                            CategoryId = 3,
                            ShortDescription = "Medium's largest active publications about Life. Follow us to join our community.",
                            Title = "Life"
                        },
                        new
                        {
                            CategoryId = 4,
                            ShortDescription = "Medium's largest active publications about Science. Follow us to join our community.",
                            Title = "Science"
                        },
                        new
                        {
                            CategoryId = 5,
                            ShortDescription = "Medium's largest active publications about Sport. Follow us to join our community.",
                            Title = "Sport"
                        },
                        new
                        {
                            CategoryId = 7,
                            ShortDescription = "Medium's largest active publications about Zen. Follow us to join our community.",
                            Title = "Zen"
                        });
                });

            modelBuilder.Entity("weblog.Models.Comment", b =>
                {
                    b.Property<int>("CommentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Body")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("Date")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("Name")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<int>("PostId")
                        .HasColumnType("int");

                    b.HasKey("CommentId");

                    b.ToTable("Comments");
                });

            modelBuilder.Entity("weblog.Models.Post", b =>
                {
                    b.Property<int>("PostId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("CategoryId")
                        .HasColumnType("int");

                    b.Property<int>("Claps")
                        .HasColumnType("int");

                    b.Property<DateTime>("DateChanged")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime>("DatePosted")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("ImageUrl")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<bool>("InSandbox")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("IsForSubscribersOnly")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("IsLocked")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("ShortDescription")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("Text")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<int>("TimeToRead")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.HasKey("PostId");

                    b.HasIndex("CategoryId");

                    b.ToTable("Posts");

                    b.HasData(
                        new
                        {
                            PostId = 1,
                            CategoryId = 1,
                            Claps = 0,
                            DateChanged = new DateTime(2019, 12, 20, 14, 7, 21, 275, DateTimeKind.Local).AddTicks(6419),
                            DatePosted = new DateTime(2019, 12, 20, 14, 7, 21, 271, DateTimeKind.Local).AddTicks(9246),
                            ImageUrl = "https://localhost:5001/Images/image1.jpg",
                            InSandbox = true,
                            IsForSubscribersOnly = false,
                            IsLocked = false,
                            ShortDescription = "Autonomous Driving Updates, HyperAutomation, and More",
                            Text = "",
                            TimeToRead = 0,
                            Title = "Here Is A Rundown of 5 Major Tech Trends Hitting 2020"
                        },
                        new
                        {
                            PostId = 2,
                            CategoryId = 2,
                            Claps = 0,
                            DateChanged = new DateTime(2019, 12, 20, 14, 7, 21, 275, DateTimeKind.Local).AddTicks(8810),
                            DatePosted = new DateTime(2019, 12, 20, 14, 7, 21, 275, DateTimeKind.Local).AddTicks(8791),
                            ImageUrl = "https://source.unsplash.com/random/800x501",
                            InSandbox = true,
                            IsForSubscribersOnly = false,
                            IsLocked = false,
                            ShortDescription = "Lorem ipsum dolor sit amet",
                            Text = "",
                            TimeToRead = 0,
                            Title = "Lorem Ipsum"
                        },
                        new
                        {
                            PostId = 3,
                            CategoryId = 2,
                            Claps = 0,
                            DateChanged = new DateTime(2019, 12, 20, 14, 7, 21, 275, DateTimeKind.Local).AddTicks(8897),
                            DatePosted = new DateTime(2019, 12, 20, 14, 7, 21, 275, DateTimeKind.Local).AddTicks(8894),
                            ImageUrl = "https://source.unsplash.com/random/800x502",
                            InSandbox = true,
                            IsForSubscribersOnly = false,
                            IsLocked = false,
                            ShortDescription = "Lorem ipsum dolor sit amet",
                            Text = "",
                            TimeToRead = 0,
                            Title = "Lorem Ipsum"
                        },
                        new
                        {
                            PostId = 4,
                            CategoryId = 2,
                            Claps = 0,
                            DateChanged = new DateTime(2019, 12, 20, 14, 7, 21, 275, DateTimeKind.Local).AddTicks(9016),
                            DatePosted = new DateTime(2019, 12, 20, 14, 7, 21, 275, DateTimeKind.Local).AddTicks(9013),
                            ImageUrl = "https://source.unsplash.com/random/800x503",
                            InSandbox = true,
                            IsForSubscribersOnly = false,
                            IsLocked = false,
                            ShortDescription = "Lorem ipsum dolor sit amet",
                            Text = "",
                            TimeToRead = 0,
                            Title = "Lorem Ipsum"
                        },
                        new
                        {
                            PostId = 5,
                            CategoryId = 2,
                            Claps = 0,
                            DateChanged = new DateTime(2019, 12, 20, 14, 7, 21, 275, DateTimeKind.Local).AddTicks(9046),
                            DatePosted = new DateTime(2019, 12, 20, 14, 7, 21, 275, DateTimeKind.Local).AddTicks(9044),
                            ImageUrl = "https://source.unsplash.com/random/800x504",
                            InSandbox = true,
                            IsForSubscribersOnly = false,
                            IsLocked = false,
                            ShortDescription = "Lorem ipsum dolor sit amet",
                            Text = "",
                            TimeToRead = 0,
                            Title = "Lorem Ipsum"
                        },
                        new
                        {
                            PostId = 6,
                            CategoryId = 1,
                            Claps = 0,
                            DateChanged = new DateTime(2019, 12, 20, 14, 7, 21, 275, DateTimeKind.Local).AddTicks(9076),
                            DatePosted = new DateTime(2019, 12, 20, 14, 7, 21, 275, DateTimeKind.Local).AddTicks(9074),
                            ImageUrl = "https://source.unsplash.com/random/800x505",
                            InSandbox = true,
                            IsForSubscribersOnly = false,
                            IsLocked = false,
                            ShortDescription = "Lorem ipsum dolor sit amet",
                            Text = "",
                            TimeToRead = 0,
                            Title = "Lorem Ipsum"
                        },
                        new
                        {
                            PostId = 7,
                            CategoryId = 1,
                            Claps = 0,
                            DateChanged = new DateTime(2019, 12, 20, 14, 7, 21, 275, DateTimeKind.Local).AddTicks(9098),
                            DatePosted = new DateTime(2019, 12, 20, 14, 7, 21, 275, DateTimeKind.Local).AddTicks(9096),
                            ImageUrl = "https://source.unsplash.com/random/800x500",
                            InSandbox = true,
                            IsForSubscribersOnly = false,
                            IsLocked = false,
                            ShortDescription = "Lorem ipsum dolor sit amet",
                            Text = "",
                            TimeToRead = 0,
                            Title = "Lorem Ipsum"
                        },
                        new
                        {
                            PostId = 8,
                            CategoryId = 1,
                            Claps = 0,
                            DateChanged = new DateTime(2019, 12, 20, 14, 7, 21, 275, DateTimeKind.Local).AddTicks(9121),
                            DatePosted = new DateTime(2019, 12, 20, 14, 7, 21, 275, DateTimeKind.Local).AddTicks(9119),
                            ImageUrl = "https://source.unsplash.com/random/800x507",
                            InSandbox = true,
                            IsForSubscribersOnly = false,
                            IsLocked = false,
                            ShortDescription = "Lorem ipsum dolor sit amet",
                            Text = "",
                            TimeToRead = 0,
                            Title = "Lorem Ipsum"
                        },
                        new
                        {
                            PostId = 9,
                            CategoryId = 1,
                            Claps = 0,
                            DateChanged = new DateTime(2019, 12, 20, 14, 7, 21, 275, DateTimeKind.Local).AddTicks(9143),
                            DatePosted = new DateTime(2019, 12, 20, 14, 7, 21, 275, DateTimeKind.Local).AddTicks(9141),
                            ImageUrl = "https://source.unsplash.com/random/800x508",
                            InSandbox = true,
                            IsForSubscribersOnly = false,
                            IsLocked = false,
                            ShortDescription = "Lorem ipsum dolor sit amet",
                            Text = "",
                            TimeToRead = 0,
                            Title = "Lorem Ipsum"
                        },
                        new
                        {
                            PostId = 10,
                            CategoryId = 3,
                            Claps = 0,
                            DateChanged = new DateTime(2019, 12, 20, 14, 7, 21, 275, DateTimeKind.Local).AddTicks(9168),
                            DatePosted = new DateTime(2019, 12, 20, 14, 7, 21, 275, DateTimeKind.Local).AddTicks(9166),
                            ImageUrl = "https://source.unsplash.com/random/800x510",
                            InSandbox = true,
                            IsForSubscribersOnly = false,
                            IsLocked = false,
                            ShortDescription = "Lorem ipsum dolor sit amet",
                            Text = "",
                            TimeToRead = 0,
                            Title = "Lorem Ipsum"
                        },
                        new
                        {
                            PostId = 11,
                            CategoryId = 3,
                            Claps = 0,
                            DateChanged = new DateTime(2019, 12, 20, 14, 7, 21, 275, DateTimeKind.Local).AddTicks(9190),
                            DatePosted = new DateTime(2019, 12, 20, 14, 7, 21, 275, DateTimeKind.Local).AddTicks(9188),
                            ImageUrl = "https://source.unsplash.com/random/800x511",
                            InSandbox = true,
                            IsForSubscribersOnly = false,
                            IsLocked = false,
                            ShortDescription = "Lorem ipsum dolor sit amet",
                            Text = "",
                            TimeToRead = 0,
                            Title = "Lorem Ipsum"
                        },
                        new
                        {
                            PostId = 12,
                            CategoryId = 3,
                            Claps = 0,
                            DateChanged = new DateTime(2019, 12, 20, 14, 7, 21, 275, DateTimeKind.Local).AddTicks(9212),
                            DatePosted = new DateTime(2019, 12, 20, 14, 7, 21, 275, DateTimeKind.Local).AddTicks(9210),
                            ImageUrl = "https://source.unsplash.com/random/800x512",
                            InSandbox = true,
                            IsForSubscribersOnly = false,
                            IsLocked = false,
                            ShortDescription = "Lorem ipsum dolor sit amet",
                            Text = "",
                            TimeToRead = 0,
                            Title = "Lorem Ipsum"
                        },
                        new
                        {
                            PostId = 13,
                            CategoryId = 3,
                            Claps = 0,
                            DateChanged = new DateTime(2019, 12, 20, 14, 7, 21, 275, DateTimeKind.Local).AddTicks(9234),
                            DatePosted = new DateTime(2019, 12, 20, 14, 7, 21, 275, DateTimeKind.Local).AddTicks(9232),
                            ImageUrl = "https://source.unsplash.com/random/800x513",
                            InSandbox = true,
                            IsForSubscribersOnly = false,
                            IsLocked = false,
                            ShortDescription = "Lorem ipsum dolor sit amet",
                            Text = "",
                            TimeToRead = 0,
                            Title = "Lorem Ipsum"
                        },
                        new
                        {
                            PostId = 14,
                            CategoryId = 3,
                            Claps = 0,
                            DateChanged = new DateTime(2019, 12, 20, 14, 7, 21, 275, DateTimeKind.Local).AddTicks(9256),
                            DatePosted = new DateTime(2019, 12, 20, 14, 7, 21, 275, DateTimeKind.Local).AddTicks(9254),
                            ImageUrl = "https://source.unsplash.com/random/800x514",
                            InSandbox = true,
                            IsForSubscribersOnly = false,
                            IsLocked = false,
                            ShortDescription = "Lorem ipsum dolor sit amet",
                            Text = "",
                            TimeToRead = 0,
                            Title = "Lorem Ipsum"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("weblog.Models.Post", b =>
                {
                    b.HasOne("weblog.Models.Category", "Category")
                        .WithMany("Posts")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
